[tox]
envlist = ci
isolated_build = True

[testenv]
allowlist_externals =
    bash
    coverage
    sphinx-build
# shared directory for re-used packages
envdir = {toxinidir}/.env_tox
extras =
    tests
    doc
skip_install = false
covargs = --cov={envsitepackagesdir}/etoolbox --cov-append --cov-report=lcov:coverage.info
covreport = coverage report --sort=cover


[testenv:linters]
description = Run the pre-commit, flake8 and bandit linters.
commands =
    pre-commit run --all-files --show-diff-on-failure python-no-eval
    pre-commit run --all-files --show-diff-on-failure python-no-log-warn
    pre-commit run --all-files --show-diff-on-failure python-check-blanket-noqa
    pre-commit run --all-files --show-diff-on-failure check-merge-conflict
    pre-commit run --all-files --show-diff-on-failure check-yaml
    pre-commit run --all-files --show-diff-on-failure check-case-conflict
    pre-commit run --all-files --show-diff-on-failure debug-statements
    pre-commit run --all-files --show-diff-on-failure name-tests-test
    bandit -c pyproject.toml -r src/etoolbox/
    flake8

[testenv:docs]
description = Build the HTML docs from scratch using Sphinx.
commands =
    bash -c 'rm -rf docs/_build'
    doc8 docs/ README.rst
    rstcheck --config pyproject.toml --recursive ./
    sphinx-build -b html docs docs/_build/html
;    sphinx-build -W -b html docs docs/_build/html

[testenv:ci]
description = Run all continuous integration (CI) checks & generate test coverage.
recreate = true
commands =
    coverage erase
    {[testenv:linters]commands}
    {[testenv:docs]commands}
    pytest {posargs} {[testenv]covargs} \
      --doctest-modules {envsitepackagesdir}/etoolbox \
      tests/unit
    {[testenv]covreport}

#######################################################################################
# Software Package Build & Release  (not currently part of RMI process)
#######################################################################################
[testenv:build]
description = Prepare Python source and binary packages for release.
basepython = python3
commands =
    bash -c 'rm -rf build/* dist/*'
    python setup.py sdist bdist_wheel

[testenv:testrelease]
description = Do a dry run of Python package release using the PyPI test server.
basepython = python3
extras =
    dev
commands =
    {[testenv:build]commands}
    twine check dist/*
    twine upload --sign --verbose --repository testpypi --skip-existing dist/*

[testenv:release]
description = Release the package to the production PyPI server.
basepython = python3
skip_install = true
extras =
    dev
commands =
    {[testenv:build]commands}
    twine check dist/*
    twine upload --sign --verbose --skip-existing dist/*
