[build-system]
requires = ["setuptools>=60", "setuptools_scm>=8"]
build-backend = "setuptools.build_meta"

[project]
name = "rmi.etoolbox"
description = "A set of tools and functions we use across projects."
license = {file = "LICENSE.txt"}
readme = "README.rst"
dynamic = ["version"]
classifiers = [
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
requires-python = ">=3.10,<3.13"
dependencies = [
    "orjson >= 3.8, < 3.11",
    "pandas[gcp] >= 1.4,< 2.3",
    "platformdirs >3.0,<4.3",
    "polars[fsspec]>=1.1.0,<1.3",
    "pyarrow>=9, <18",
    "tzdata>=2022.7; platform_system=='Windows'",
]

[project.optional-dependencies]
dev = [
    "build>=0.9",
    "ruff>0.0.215,<0.5.3",
    "tox>=4.16.0,<4.17",
    "twine>=4.0",
]
doc = [
    "doc8>=0.9,<1.2",  # Ensures clean documentation formatting
    "furo>=2022.4.7",  # A clean customisable Sphinx documentation theme.
    "rstcheck[sphinx,toml]>=5.0,<6.3",  # ReStructuredText linter
    "sphinx>=4,!=5.1.0,<7.4.7",
    "sphinx-autoapi>=1.8,<3.2",
    "sphinx-issues>=1.2,<4.2",
    "sphinx-autodoc-typehints>1.19,<2.2.4",
    "sphinxcontrib-mermaid>0.7,<0.10.0",
]
tests = [
    "coverage>=5.3,<7.7",  # Lets us track what code is being tested
    "pre-commit>=2.9,<3.8",  # Allow us to run pre-commit hooks in testing
    "pytest>=6.2,<8.3",  # test framework
    "pytest-console-scripts>=1.1,<1.5",  # Allow automatic testing of scripts
    "pytest-cov>=2.10,<5.1",  # Pytest plugin for working with coverage
    "ruff>0.0.215,<0.5.3",
    "tox>=4.16.0,<4.17",  # Python test environment manager
    "tqdm >= 4.63,< 4.67",
    "requests_mock",  # used by remote_zip tests
    "pytest-socket",  #
]
optional = [
    "plotly>5.10,<5.23",
    "sqlalchemy>1.4,<2.1",
]
pudl-test = []

[tool.setuptools.dynamic]
version = {attr = "etoolbox._version.__version__"}

[tool.setuptools_scm]
write_to = "src/etoolbox/_version.py"

[project.scripts]  # entry points
rmi-pudl-init = "etoolbox.utils.pudl:rmi_pudl_init"
rmi-pudl-clean = "etoolbox.utils.pudl:rmi_pudl_clean"
pudl-table-rename = "etoolbox.utils.table_map:main"

#######################################################################################
# Configurations for linters and other tools
#######################################################################################
[tool.doc8]
max-line-length = 88
ignore-path = "docs/_build"

[tool.pytest.ini_options]
testpaths = ["."]
addopts = ["--verbose", "--doctest-modules"]
log_format = "%(asctime)s [%(levelname)8s] %(name)s:%(lineno)s %(message)s"
log_date_format=" %Y-%m-%d %H:%M:%S"
log_cli = true
log_cli_level = "INFO"
doctest_optionflags = ["NORMALIZE_WHITESPACE", "IGNORE_EXCEPTION_DETAIL", "ELLIPSIS"]
filterwarnings = [
    "ignore:distutils Version classes are deprecated:DeprecationWarning",
    "ignore:Creating a LegacyVersion:DeprecationWarning:pkg_resources[.*]",
]

[tool.rstcheck]
report_level = "WARNING"
ignore_roles = ["pr", "issue", "user", "include"]
ignore_messages = '(Hyperlink target .* is not referenced\.$|Duplicate implicit target name:|An `AttributeError` error occured.*)'
ignore_directives = ["bibliography", "todo", "include"]

[tool.ruff]
line-length = 88
show-fixes = true

[tool.ruff.format]
# Enable reformatting of code snippets in docstrings.
docstring-code-format = true

[tool.ruff.lint]
select = [  # https://beta.ruff.rs/docs/rules/
    "A", # flake8-builtins
    "B", # flake8-bugbear
    "C",
    "C4", # flake8-comprehensions
    "D", # flake8-docstrings
    "E",  # pycodestyle
    "F",  # Pyflakes
    "FBT", # flake8-boolean-trap
    "G", # flake8-logging-format
    "I", # isort
    "TID", # flake8-tidy-imports
    "N", # pep8-naming
    "PD",  # pandas
    "PT", # flake8-pytest-style
    "PGH", # pygrep-hooks
    "S", # bandit
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "UP", # pyupgrade
    "W",  # pycodestyle
    "RUF", # Ruff-specific rules
    "Q", # flake8-quotes
]
ignore = [
    "D105",
    "D203",  # 1 blank line required before class docstring
    "D213",  # Multi-line docstring summary should start at the second line
    "D401",  # First line of docstring should be in imperative mood: "{first_line}"
    "D407",  # dashed-underline-after-section, upsets Sphinx
    "D416",
    # conflict with ruff format
    "W191",  # tab-indentation
    "E111",  # indentation-with-invalid-multiple
    "E114",  # indentation-with-invalid-multiple-comment
    "E117",  # over-indented
    "D206",  # indent-with-spaces
    "D300",  # triple-single-quotes
    "Q000",  # bad-quotes-inline-string
    "Q001",  # bad-quotes-multiline-string
    "Q002",  # bad-quotes-docstring
    "Q003",  # avoidable-escaped-quote
    "COM812",  # missing-trailing-comma
    "COM819",  # prohibited-trailing-comma
    "ISC001",  # single-line-implicit-string-concatenation
    "ISC002",  # multi-line-implicit-string-concatenation
]
flake8-tidy-imports.ban-relative-imports = "all"
flake8-type-checking.strict = true
mccabe.max-complexity = 15  # Unlike Flake8, default to a complexity level of 10.
pycodestyle.max-doc-length = 88
pydocstyle.convention = "google"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"docs/conf.py" = ["E501"]
"docs/benchmarks.py" = ["D103", "S301", "S311"]
"tests/*.py" = [
    "D100",  # Missing docstring in public module
    "D101",  # Missing docstring in public class
    "F841",  # Local variable `pudl` is assigned to but never used
    "FBT003", # Boolean positional value in function call, can't fix it pytest.param
    "PD901",
    "PT006",  # Wrong name(s) type in `@pytest.mark.parametrize`, expected `tuple`
    "PT011",  # `pytest.raises(ValueError)` is too broad, set the `match` parameter or use a more specific exception
    "S101",  # Use of `assert` detected
    "SIM117",  # Use a single `with` statement with multiple contexts instead of nested `with` statements

]
"tests/unit/utils_remote_zip_test.py" = ["D102", "D103", "D107", "FBT002"]
"_test_classes.py" = ["FBT003"]
"table_map.py" = ["D103", "E501"]
"pudl_helpers.py" = ["PD901"]
